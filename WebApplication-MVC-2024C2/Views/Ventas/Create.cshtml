@model WebApplication_MVC_2024C2.Models.Venta

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Venta</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label for="IdPelicula">Película</label>
                <select asp-for="IdPelicula" class="form-control" asp-items="ViewBag.Peliculas">
                    <option value="">Seleccione una película</option>
                </select>
                <span asp-validation-for="IdPelicula" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Fecha" class="control-label">Fecha</label>
                <select asp-for="Fecha" class="form-control" asp-items="ViewBag.Fechas"></select>
                <span asp-validation-for="Fecha" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label" for="CantButacas">Cantidad de Butacas</label>
                <input asp-for="CantButacas" class="form-control" type="number"
                       min="0" max="10" required />
                <span asp-validation-for="CantButacas" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="Promocion">Aplicar Promoción</label>
                <select asp-for="Promocion" class="form-control">
                    <option value="false">Seleccionar promoción</option>
                    <option value="true">50% de descuento (1000 puntos)</option>
                </select>
                <span asp-validation-for="Promocion" class="text-danger"></span>
            </div>


            <div class="form-group">
                <label for="PuntosUsuario">Puntos disponibles</label>
                <input type="text" id="PuntosUsuario" class="form-control" value="@ViewBag.PuntosUsuario" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Total" class="control-label"></label>
                <input asp-for="Total" class="form-control" readonly />
                <span asp-validation-for="Total" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>
    document.getElementById("IdPelicula").addEventListener("change", function () {
        var peliculaId = this.value;

        fetch('/Ventas/GetFechasByPelicula/' + peliculaId)
            .then(response => response.json())
            .then(data => {
                var fechaDropdown = document.getElementById("Fecha");
                fechaDropdown.innerHTML = ""; // Limpiar las opciones anteriores

                data.forEach(fecha => {
                    var option = document.createElement("option");
                    option.value = fecha;
                    option.textContent = new Date(fecha).toLocaleDateString();
                    fechaDropdown.appendChild(option);
                });
            });
    });

    document.getElementById("CantButacas").addEventListener("input", function (event) {
        let cantButacas = parseInt(event.target.value, 20);
        if (cantButacas < 0) {
            event.target.setCustomValidity("La cantidad de butacas no puede ser negativa.");
        } else {
            event.target.setCustomValidity(""); // Limpia el mensaje de error si el valor es válido
        }
    });

    // Referencias a los elementos del formulario
    const peliculaDropdown = document.getElementById("IdPelicula");
    const cantButacasInput = document.getElementById("CantButacas");
    const totalInput = document.getElementById("Total");
    const promocionSelect = document.getElementById("Promocion");
    const puntosUsuarioInput = document.getElementById("PuntosUsuario");

     // Función para actualizar el total
    function actualizarTotal() {
        const peliculaId = peliculaDropdown.value;
        const cantButacas = parseInt(cantButacasInput.value) || 0;
        const promocion = promocionSelect.value === "true";  // Verifica si la opción seleccionada es '50%' de descuento

        // Si no hay película seleccionada, no calcular
        if (!peliculaId || cantButacas <= 0) {
            totalInput.value = "";
            return;
        }

        // Obtener el precio de la película seleccionada
        fetch(`/Ventas/GetPrecioByPelicula/${peliculaId}`)
            .then(response => response.json())
            .then(precio => {
                let total = precio * cantButacas;  // Calcula el total sin descuento

                // Verificar si la promoción es válida
                if (promocion) {
                    const puntosUsuario = parseInt(puntosUsuarioInput.value) || 0;
                    if (puntosUsuario < 1000) {
                        alert("No tienes suficientes puntos para aplicar la promoción.");
                        promocionSelect.value = "false";  // Desmarcar la opción de promoción
                        total = precio * cantButacas;  // Volver al precio original
                    } else {
                        total = total / 2;  // Aplica el descuento del 50%
                    }
                }

                totalInput.value = total.toFixed(2);  // Mostrar con dos decimales
            });
    }

    // Escuchar cambios en los campos relevantes
    peliculaDropdown.addEventListener("change", actualizarTotal);
    cantButacasInput.addEventListener("input", actualizarTotal);
    promocionSelect.addEventListener("change", actualizarTotal);

</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
